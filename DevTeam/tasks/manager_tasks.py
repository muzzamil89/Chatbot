"""Tasks for the Manager Agent."""
from typing import List
from crewai import Task, Agent
from pydantic import BaseModel, Field
from config import ARCHITECTURE_FILE, BUG_FILE
from utils.file_io import write_file

class ArchitectureOutput(BaseModel):
    """Pydantic model for the manager agent's architecture output."""
    architecture_document: str = Field(
        ...,
        description="The detailed content of the architecture design document."
    )

class BugFixPlanOutput(BaseModel):
    """Pydantic model for the manager's bug fix plan."""
    plan: str = Field(
        ...,
        description="A clear, concise, and prioritized plan for the developer to fix bugs."
    )

def design_architecture_task(agent: Agent, context: List[Task]) -> Task:
    """Creates a task to design the software architecture based on requirements from context."""
    return Task(
        description="""Based on the provided requirements in the context, design a robust and scalable software architecture.
Your output should be a detailed document outlining the architecture, including components, data flow, and technology stack.
You MUST use the `ArchitectureOutput` tool to format your final answer.""",
        agent=agent,
        context=context,
        expected_output=f"A JSON object containing the architecture design, which will be saved to '{ARCHITECTURE_FILE}'.",
        output_json=ArchitectureOutput,
        callback=lambda output: write_file(ARCHITECTURE_FILE, output.json_dict['architecture_document'])
    )

def manage_bug_fixes_task(agent: Agent, context: List[Task]) -> Task:
    """Creates a task for the manager to review bugs and assign fixes."""
    return Task(
        description="""A bug report has been generated by the QA Tester and is provided in the context.
Your sole responsibility is to analyze this bug report and create a clear, prioritized, and actionable plan for the Senior Developer.

**Do not delegate the fixing task yourself.** Your final output must be ONLY the plan.

The plan should be a concise set of instructions, focusing on the most critical bugs first.
You MUST use the `BugFixPlanOutput` tool to format your final answer, which contains the plan as a string.""",
        agent=agent,
        context=context,
        expected_output="A JSON object containing the prioritized plan for the developer.",
        output_json=BugFixPlanOutput
    )